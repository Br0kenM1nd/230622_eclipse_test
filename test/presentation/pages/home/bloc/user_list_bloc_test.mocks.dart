// Mocks generated by Mockito 5.4.2 from annotations
// in eds_test/test/presentation/pages/home/bloc/user_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:eds_test/data/models/album/album.dart' as _i6;
import 'package:eds_test/data/models/comment/comment.dart' as _i8;
import 'package:eds_test/data/models/photo/photo.dart' as _i7;
import 'package:eds_test/data/models/post/post.dart' as _i5;
import 'package:eds_test/data/models/user/user.dart' as _i4;
import 'package:eds_test/data/services/api_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  @override
  _i3.Future<List<_i4.User>> getAllUsers() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue: _i3.Future<List<_i4.User>>.value(<_i4.User>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.User>>.value(<_i4.User>[]),
      ) as _i3.Future<List<_i4.User>>);
  @override
  _i3.Future<List<_i5.Post>> getAllPosts() => (super.noSuchMethod(
        Invocation.method(
          #getAllPosts,
          [],
        ),
        returnValue: _i3.Future<List<_i5.Post>>.value(<_i5.Post>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.Post>>.value(<_i5.Post>[]),
      ) as _i3.Future<List<_i5.Post>>);
  @override
  _i3.Future<List<_i6.Album>> getAllAlbums() => (super.noSuchMethod(
        Invocation.method(
          #getAllAlbums,
          [],
        ),
        returnValue: _i3.Future<List<_i6.Album>>.value(<_i6.Album>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i6.Album>>.value(<_i6.Album>[]),
      ) as _i3.Future<List<_i6.Album>>);
  @override
  _i3.Future<List<_i7.Photo>> getAllPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getAllPhotos,
          [],
        ),
        returnValue: _i3.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
      ) as _i3.Future<List<_i7.Photo>>);
  @override
  _i3.Future<List<_i8.Comment>> getAllComments() => (super.noSuchMethod(
        Invocation.method(
          #getAllComments,
          [],
        ),
        returnValue: _i3.Future<List<_i8.Comment>>.value(<_i8.Comment>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i8.Comment>>.value(<_i8.Comment>[]),
      ) as _i3.Future<List<_i8.Comment>>);
  @override
  _i3.Future<List<_i5.Post>> getPostsByUserId(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsByUserId,
          [userId],
        ),
        returnValue: _i3.Future<List<_i5.Post>>.value(<_i5.Post>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.Post>>.value(<_i5.Post>[]),
      ) as _i3.Future<List<_i5.Post>>);
  @override
  _i3.Future<List<_i6.Album>> getAlbumsByUserId(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlbumsByUserId,
          [userId],
        ),
        returnValue: _i3.Future<List<_i6.Album>>.value(<_i6.Album>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i6.Album>>.value(<_i6.Album>[]),
      ) as _i3.Future<List<_i6.Album>>);
  @override
  _i3.Future<List<_i6.AlbumWithPhotos>> getAlbumsByUserIdWithPhotos(
          int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlbumsByUserIdWithPhotos,
          [userId],
        ),
        returnValue: _i3.Future<List<_i6.AlbumWithPhotos>>.value(
            <_i6.AlbumWithPhotos>[]),
        returnValueForMissingStub: _i3.Future<List<_i6.AlbumWithPhotos>>.value(
            <_i6.AlbumWithPhotos>[]),
      ) as _i3.Future<List<_i6.AlbumWithPhotos>>);
  @override
  _i3.Future<List<_i7.Photo>> getPhotosByAlbumId(int? albumId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotosByAlbumId,
          [albumId],
        ),
        returnValue: _i3.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
      ) as _i3.Future<List<_i7.Photo>>);
  @override
  _i3.Future<List<_i8.Comment>> getCommentsByPostId(int? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentsByPostId,
          [postId],
        ),
        returnValue: _i3.Future<List<_i8.Comment>>.value(<_i8.Comment>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i8.Comment>>.value(<_i8.Comment>[]),
      ) as _i3.Future<List<_i8.Comment>>);
  @override
  _i3.Future<void> sendComment({
    required String? name,
    required String? email,
    required String? comment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendComment,
          [],
          {
            #name: name,
            #email: email,
            #comment: comment,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
